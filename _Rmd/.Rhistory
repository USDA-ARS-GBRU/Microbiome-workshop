knit_with_parameters('~/Documents/MicrobiomeWorkshop/Amplicon tutorial/tutorial.Rmd')
install.packages("knitr")
install.packages(c("DBI", "forecast", "KFAS", "mapproj", "maps", "quantmod", "R6", "rmarkdown", "RSQLite", "XML"))
?knitr
KnitPost <- function(site.path='/Users/rivers/Documents/MicrobiomeWorkshop/Microbiome-workshop', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost()
setwd("/Users/rivers/Documents/MicrobiomeWorkshop/Microbiome-workshop/_Rmd")
KnitPost <- function(site.path='/Users/rivers/Documents/MicrobiomeWorkshop/Microbiome-workshop/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost()
hoi <- data.frame(Sale_Date=as.Date("2017-08-01"),appraised=239600, HtdSqFt=2629,costPerSqFt=310000/2629, Sale_Price=310000, Land_Value=36000, Bldg_Value=193600 )
library("ggplot2")
library("viridis")
library("viridisLite")
#Load data from the Property Appraiser's website
data <- read.csv("~/Downloads/3bed.csv")
data$beds <- rep(x=3, times=dim(data)[1])
data2 <- read.csv("~/Downloads/4bed.csv")
data2$beds <- rep(x=4, times=dim(data2)[1])
data<-rbind(data, data2)
# Set date format
data$Sale_Date <-as.Date(data$Sale_Date, format="%m/%d/%Y")
# filter out records with NA's
data<-data[is.na(data$HtdSqFt) ==FALSE,]
data<-data[data$HtdSqFt > 0,]
data<-data[is.na(data$Bldg_Value)==FALSE,]
data<-data[is.na(data$Sale_Price)==FALSE,]
data<-data[data$Sale_Price<800000,]
data<-data[is.na(data$Sale_Date)==FALSE,]
# Calculate cost per heated square foot
data$costPerSqFt<-data$Sale_Price/data$HtdSqFt
# Add land and building value together
data$appraised <- data$Land_Value + data$Bldg_Value
#filter out data before 2010
data<-data[data$Sale_Date>"2010-01-01",]
# Filter out extreamly low value sales that are likely to be interfamily transfers etc.
data<-data[data$Sale_Price>50000,]
# Plot the Log odds ratio of Sale Price / Appraised price to find outliers
ggplot(data = data, aes(x=log2(Sale_Price/appraised))) +
geom_histogram(bins=50) +
xlab("log2 odds ratio of sale prise vs appraised price ")
# filter outliers
data<-data[abs(log2(data$Sale_Price/data$appraised))<1, ]
hoi <- data.frame(Sale_Date=as.Date("2017-08-01"),appraised=239600, HtdSqFt=2629,costPerSqFt=310000/2629, Sale_Price=310000, Land_Value=36000, Bldg_Value=193600 )
hoi <- data.frame(Sale_Date=as.Date("2017-08-01"),appraised=239600, HtdSqFt=2629,costPerSqFt=310000/2629, Sale_Price=310000, Land_Value=36000, Bldg_Value=193600 )
hoi <- data.frame(Sale_Date=as.Date("2017-08-01"),appraised=239600, HtdSqFt=2629,costPerSqFt=310000/2629, Sale_Price=310000, Land_Value=36000, Bldg_Value=193600 )
ggplot(data= data, aes(x=Sale_Price, y= appraised)) + geom_point(aes(color=log10(HtdSqFt)),  size=0.5) + scale_color_viridis() +
geom_smooth(method ="lm") +
ylab("Appraised value") +
xlab("Sale price") +
geom_point(data = hoi, colour = "red")
del <- 5000
slice <- data[(data$appraised > (housevalue - del) & data$appraised < (housevalue +del)),]
# Plot the Price per Square Foot over time
#datasubset<- data[(data$Sale_Price>180000 & data$Sale_Price < 350000), ]
ggplot(data=data, aes(x=Sale_Date, y=costPerSqFt)) +
geom_point(aes(color=log10(Sale_Price)), size=0.5) +
scale_color_viridis() +
geom_smooth(method="loess") +
ylab("Dollars per Square Foot") +
xlab("Year") +
geom_point(data = hoi, colour = "red")
ggplot(data=data, aes(x=Sale_Price, y=costPerSqFt)) +
scale_x_log10(minor=c(1e5,2e5,3e5,4e5,6e5,7e5)) +
geom_point(aes(color=log10(HtdSqFt)),size=0.5) +
scale_color_viridis() +
geom_smooth(method ="lm") +
ylab("Dollars per Square Foot") +
xlab("Sale price on a log scale") +
geom_point(data = hoi, colour = "red")
